name: Build and Release MCP RAG Indexer

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run platform tests
      run: npm run test:platform
      
    - name: Run integration tests
      run: npm run test:integration
      continue-on-error: true # Integration tests may fail without Python runtime
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 7

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download Python runtimes
      run: node scripts/download-runtimes.js
      timeout-minutes: 30
      
    - name: Download ML models
      run: node scripts/download-models.js
      timeout-minutes: 20
      
    - name: Build package
      run: npm run build
      timeout-minutes: 45
      
    - name: Validate package
      run: npm run validate
      
    - name: Create package tarball
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: mcp-rag-indexer-*.tgz
        retention-days: 30

  test-package:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: npm-package
        
    - name: Install package globally
      run: npm install -g mcp-rag-indexer-*.tgz
      
    - name: Test CLI version
      run: mcp-rag-indexer --version
      
    - name: Test CLI status
      run: mcp-rag-indexer --status
      
    - name: Test installation validation
      run: mcp-rag-indexer --validate
      continue-on-error: true # May fail due to missing dependencies
      
    - name: Uninstall package
      run: npm uninstall -g mcp-rag-indexer

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v3

  release:
    name: Release to NPM
    runs-on: ubuntu-latest
    needs: [test, build, test-package]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: npm-package
        
    - name: Extract package
      run: tar -xzf mcp-rag-indexer-*.tgz
      
    - name: Publish to NPM
      run: |
        cd package
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: MCP RAG Indexer ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}
          
          ### Installation
          ```bash
          npm install -g mcp-rag-indexer@${{ github.ref_name }}
          ```
          
          ### Features
          - Zero-configuration global installation
          - Cross-platform support (Windows, macOS, Linux)
          - Embedded Python runtime and ML models
          - Automatic Claude Code integration
          
          ### System Requirements
          - Node.js 16+ 
          - No Python installation required
          
          See the [README](https://github.com/${{ github.repository }}) for full documentation.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [test, build, test-package]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success' && needs.test-package.result == 'success'
      run: |
        echo "✅ All CI/CD stages completed successfully!"
        echo "Package is ready for release."
        
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.test-package.result == 'failure'
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "Package test result: ${{ needs.test-package.result }}"
        exit 1