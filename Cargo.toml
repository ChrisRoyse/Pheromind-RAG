[package]
name = "embed-search"
version = "0.1.0"
edition = "2021"
description = "Rust-based semantic search system with ML embeddings, vector storage, and symbol indexing"
license = "MIT OR Apache-2.0"

[dependencies]
regex = "1.11"

# Nomic Embed GGUF support (ML feature)
reqwest = { version = "0.11", features = ["stream"], optional = true }
dirs = { version = "5.0", optional = true }
memmap2 = { version = "0.9", optional = true }

# Candle for GGUF inference (ML feature)
candle-core = { version = "0.9", optional = true }
candle-nn = { version = "0.9", optional = true }
candle-transformers = { version = "0.9", optional = true }
tokenizers = { version = "0.21", default-features = false, features = ["onig"], optional = true }
hf-hub = { version = "0.3", features = ["tokio"], optional = true }
byteorder = { version = "1.5", optional = true }
rand = { version = "0.8", optional = true }

# LanceDB vector database (vectordb feature)
lancedb = { version = "0.21.2", optional = true }
arrow = { version = "55.0", optional = true }
arrow-array = { version = "55.0", optional = true }
arrow-schema = { version = "55.0", optional = true }

# Legacy sled for migration (vectordb feature)
sled = { version = "0.34", optional = true }

# Always needed
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
anyhow = "1.0"
tokio = { version = "1.43", features = ["full"] }
futures = "0.3"
chrono = { version = "0.4", features = ["serde"] }
once_cell = "1.19"
async-trait = "0.1"
thiserror = "1.0"
log = "0.4"

# Configuration management
toml = "0.8"
config = "0.13"
serde_yaml = "0.9"
clap = { version = "4.4", features = ["derive"] }

# Embedding optimization
lru = "0.12"
sha2 = "0.10"

# BM25 and text processing
rust-stemmers = "1.2"
bincode = "1.3"
unicode-normalization = "0.1"
unicode-segmentation = "1.10"

# Native search and parallel processing
rayon = "1.7"
walkdir = "2.4"

# Tantivy for text search with fuzzy matching (tantivy feature)
tantivy = { version = "0.24", optional = true }
tantivy-jieba = { version = "0.16", optional = true }

# Retry logic with exponential backoff
backoff = "0.4"

# Memory management and system monitoring
sysinfo = "0.30"

# Thread-safe data structures
parking_lot = "0.12"

# Observability - metrics and logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json", "chrono"] }

# Tree-sitter for symbol indexing (tree-sitter feature)
tree-sitter = { version = "0.23", optional = true }
tree-sitter-rust = { version = "0.23", optional = true }
tree-sitter-python = { version = "0.23", optional = true }
tree-sitter-javascript = { version = "0.23", optional = true }
tree-sitter-typescript = { version = "0.23", optional = true }
tree-sitter-go = { version = "0.23", optional = true }
tree-sitter-java = { version = "0.23", optional = true }
tree-sitter-c = { version = "0.23", optional = true }
tree-sitter-cpp = { version = "0.23", optional = true }
tree-sitter-html = { version = "0.23", optional = true }
tree-sitter-css = { version = "0.23", optional = true }
tree-sitter-json = { version = "0.23", optional = true }
tree-sitter-bash = { version = "0.23", optional = true }

# Temporary directory management
tempfile = "3.12"

[[bin]]
name = "tantivy_migrator"
path = "src/bin/tantivy_migrator.rs"
required-features = ["tantivy"]

[[bin]]
name = "verify_symbols"
path = "src/bin/verify_symbols.rs"
required-features = ["tree-sitter"]

[[bin]]
name = "test_persistence"
path = "src/bin/test_persistence.rs"
required-features = ["tantivy"]

[[bin]]
name = "test_project_scoping"
path = "src/bin/test_project_scoping.rs"
required-features = ["tantivy"]

[[bin]]
name = "test_unified_project_scope"
path = "src/bin/test_unified_project_scope.rs"
required-features = ["tantivy"]

[features]
default = ["core"]

# Core features (minimal dependencies) - includes BM25 and basic text processing
core = []

# Individual feature flags for controlled capability addition:
#
# tree-sitter: Symbol indexing and parsing for code files
# - Adds support for extracting function/class definitions from source code
# - Required for symbol-based search functionality
tree-sitter = ["dep:tree-sitter", "dep:tree-sitter-rust", "dep:tree-sitter-python", "dep:tree-sitter-javascript", "dep:tree-sitter-typescript", "dep:tree-sitter-go", "dep:tree-sitter-java", "dep:tree-sitter-c", "dep:tree-sitter-cpp", "dep:tree-sitter-html", "dep:tree-sitter-css", "dep:tree-sitter-json", "dep:tree-sitter-bash"]

# ml: Machine learning embeddings using Candle and GGUF models
# - Enables semantic similarity search using Nomic embeddings
# - Requires significant disk space for model files (~500MB)
# - Compilation time increases substantially with ML dependencies
ml = ["dep:candle-core", "dep:candle-nn", "dep:candle-transformers", "dep:tokenizers", "dep:hf-hub", "dep:reqwest", "dep:dirs", "dep:memmap2", "dep:byteorder", "dep:rand"]

# vectordb: LanceDB vector database storage
# - Required for storing and searching embedding vectors
# - Must be used together with 'ml' feature for semantic search
vectordb = ["dep:lancedb", "dep:arrow", "dep:arrow-array", "dep:arrow-schema", "dep:sled"]

# tantivy: Full-text search with fuzzy matching
# - High-performance text indexing and retrieval
# - Supports complex query syntax and ranking
tantivy = ["dep:tantivy", "dep:tantivy-jieba"]

# Convenience feature combinations:
search-basic = ["core", "tantivy"]                    # Text search only
search-advanced = ["core", "tree-sitter", "tantivy"]  # Text + symbol search
full-system = ["tree-sitter", "ml", "vectordb", "tantivy"]  # All capabilities

# Testing-specific features:
test-integration = ["full-system"]  # Full system tests
test-performance = ["full-system"]  # Performance benchmarks

[profile.test]
opt-level = 2  # Optimize tests for speed

[dev-dependencies]
criterion = "0.5"
tempfile = "3.12"

[[bench]]
name = "line_tracking_bench"
harness = false

[[test]]
name = "chunker_integration_tests"
path = "tests/chunker_integration_tests.rs"

[[test]]
name = "line_tracking_tests"
path = "tests/line_tracking_tests.rs"

[[test]]
name = "nomic_embedding_tests"
path = "tests/nomic_embedding_tests.rs"

[[test]]
name = "real_embedding_system_tests"
path = "tests/real_embedding_system_tests.rs"

[[test]]
name = "embedding_performance_benchmark"
path = "tests/embedding_performance_benchmark.rs"

[[test]]
name = "production_embedding_verification"
path = "tests/production_embedding_verification.rs"

[[test]]
name = "search_accuracy_test"
path = "tests/search_accuracy_test.rs"

[[test]]
name = "compile_time_feature_tests"
path = "tests/compile_time_feature_tests.rs"
