warning: unused import: `rustc_hash::FxHashMap`
 --> src\search\fusion.rs:2:5
  |
2 | use rustc_hash::FxHashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: field `config` is never read
  --> src\search\simple_searcher.rs:54:5
   |
53 | pub struct SimpleSearcher {
   |            -------------- field in this struct
54 |     config: SearchConfig,
   |     ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function `looks_like_symbol` is never used
   --> src\search\simple_searcher.rs:222:8
    |
64  | impl SimpleSearcher {
    | ------------------- associated function in this implementation
...
222 |     fn looks_like_symbol(query: &str) -> bool {
    |        ^^^^^^^^^^^^^^^^^

warning: field `embedding_metrics` is never read
   --> src\observability\metrics.rs:284:5
    |
282 | pub struct MetricsCollector {
    |            ---------------- field in this struct
283 |     search_metrics: Arc<Mutex<SearchMetrics>>,
284 |     embedding_metrics: Arc<Mutex<EmbeddingMetrics>>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `MetricsCollector` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: function `safe_percentage` is never used
  --> src\observability\metrics.rs:45:12
   |
45 |     pub fn safe_percentage(numerator: f64, denominator: f64) -> Option<f64> {
   |            ^^^^^^^^^^^^^^^

warning: `embed-search` (lib) generated 5 warnings (run `cargo fix --lib -p embed-search` to apply 1 suggestion)
warning: unused import: `std::fs`
 --> tests\stress_test_validation.rs:3:5
  |
3 | use std::fs;
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tempfile::TempDir`
 --> tests\stress_test_validation.rs:4:5
  |
4 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> tests\bm25_stress_test_runner.rs:3:17
  |
3 | use std::sync::{Arc, Mutex};
  |                 ^^^  ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `BM25Document` and `Token`
   --> tests\bm25_stress_test_runner.rs:138:54
    |
138 |         use embed_search::search::bm25::{BM25Engine, BM25Document, Token};
    |                                                      ^^^^^^^^^^^^  ^^^^^

warning: unused imports: `BM25Document` and `Token`
   --> tests\bm25_stress_test_runner.rs:293:54
    |
293 |         use embed_search::search::bm25::{BM25Engine, BM25Document, Token};
    |                                                      ^^^^^^^^^^^^  ^^^^^

warning: associated function `create_test_doc` is never used
   --> tests\bm25_stress_test_runner.rs:839:8
    |
40  | impl BM25StressTestRunner {
    | ------------------------- associated function in this implementation
...
839 |     fn create_test_doc(id: &str, terms: Vec<&str>) -> embed_search::search::bm25::BM25Document {
    |        ^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `Semaphore`
 --> tests\concurrency_stress_validation.rs:8:27
  |
8 | use tokio::sync::{RwLock, Semaphore};
  |                           ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `embed_search::chunking::SimpleRegexChunker`
  --> tests\concurrency_stress_validation.rs:18:5
   |
18 | use embed_search::chunking::SimpleRegexChunker;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
  --> tests\concurrency_stress_validation.rs:19:5
   |
19 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `Process`
   --> tests\concurrency_stress_validation.rs:520:27
    |
520 |     use sysinfo::{System, Process};
    |                           ^^^^^^^

warning: unused variable: `task_id`
   --> tests\concurrency_stress_validation.rs:381:9
    |
381 |     for task_id in 0..config.concurrent_tasks {
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `std::collections::HashMap`
 --> tests\tantivy_thread_safety_tests.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_thread_safety_tests.rs:2:5
  |
2 | use std::fs;
  |     ^^^^^^^

warning: unused imports: `PathBuf` and `Path`
 --> tests\tantivy_thread_safety_tests.rs:3:17
  |
3 | use std::path::{Path, PathBuf};
  |                 ^^^^  ^^^^^^^

warning: unused imports: `Arc`, `Mutex`, and `RwLock`
 --> tests\tantivy_thread_safety_tests.rs:4:17
  |
4 | use std::sync::{Arc, Mutex, RwLock};
  |                 ^^^  ^^^^^  ^^^^^^

warning: unused imports: `AtomicBool`, `AtomicUsize`, and `Ordering`
 --> tests\tantivy_thread_safety_tests.rs:5:25
  |
5 | use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
  |                         ^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `std::thread`
 --> tests\tantivy_thread_safety_tests.rs:6:5
  |
6 | use std::thread;
  |     ^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> tests\tantivy_thread_safety_tests.rs:8:5
  |
8 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\tantivy_thread_safety_tests.rs:9:5
  |
9 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::task`
  --> tests\tantivy_thread_safety_tests.rs:10:5
   |
10 | use tokio::task;
   |     ^^^^^^^^^^^

warning: unused import: `super::*`
  --> tests\tantivy_thread_safety_tests.rs:28:9
   |
28 |     use super::*;
   |         ^^^^^^^^

warning: unused imports: `debug`, `error`, and `info`
   --> src\observability\logging.rs:279:19
    |
279 |     use tracing::{info, debug, error};
    |                   ^^^^  ^^^^^  ^^^^^

warning: unused variable: `result`
   --> src\observability\logging.rs:317:13
    |
317 |         let result = log_async_performance!("async_test_operation", {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `std::time::Instant`
  --> tests\tantivy_functionality_validation.rs:19:5
   |
19 | use std::time::Instant;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tempfile::TempDir`
  --> tests\tantivy_functionality_validation.rs:20:5
   |
20 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::fs`
  --> tests\tantivy_functionality_validation.rs:21:5
   |
21 | use tokio::fs;
   |     ^^^^^^^^^

   Compiling embed-search v0.1.0 (C:\code\embed)
warning: unused imports: `FusedResult`, `MatchType`, and `SimpleFusion`
 --> tests\semantic_accuracy_unit_test.rs:4:36
  |
4 | use embed_search::search::fusion::{SimpleFusion, FusedResult, MatchType, FusionConfig};
  |                                    ^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `anyhow::Result`
 --> tests\semantic_search_accuracy_fix_validation.rs:6:5
  |
6 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::collections::HashMap`
 --> tests\semantic_search_accuracy_fix_validation.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\semantic_search_accuracy_fix_validation.rs:8:5
  |
8 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: constant `BATCH_SIZE` is never used
   --> tests\bm25_missing_stress_tests.rs:641:15
    |
641 |         const BATCH_SIZE: usize = 5_000;  // Smaller batches for memory monitoring
    |               ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `embed-search` (test "stress_test_validation") generated 2 warnings (run `cargo fix --test "stress_test_validation"` to apply 2 suggestions)
warning: `embed-search` (test "bm25_stress_test_runner") generated 4 warnings (run `cargo fix --test "bm25_stress_test_runner"` to apply 3 suggestions)
warning: `embed-search` (test "concurrency_stress_validation") generated 5 warnings (run `cargo fix --test "concurrency_stress_validation"` to apply 4 suggestions)
warning: `embed-search` (test "tantivy_thread_safety_tests") generated 10 warnings (run `cargo fix --test "tantivy_thread_safety_tests"` to apply 10 suggestions)
warning: `embed-search` (lib test) generated 7 warnings (5 duplicates) (run `cargo fix --lib -p embed-search --tests` to apply 1 suggestion)
warning: `embed-search` (test "tantivy_functionality_validation") generated 3 warnings (run `cargo fix --test "tantivy_functionality_validation"` to apply 3 suggestions)
warning: `embed-search` (test "semantic_accuracy_unit_test") generated 1 warning (run `cargo fix --test "semantic_accuracy_unit_test"` to apply 1 suggestion)
warning: `embed-search` (test "semantic_search_accuracy_fix_validation") generated 3 warnings (run `cargo fix --test "semantic_search_accuracy_fix_validation"` to apply 3 suggestions)
warning: `embed-search` (test "bm25_missing_stress_tests") generated 1 warning
warning: function `cosine_similarity` is never used
   --> tests\real_embedding_system_tests.rs:295:4
    |
295 | fn cosine_similarity(a: &[f32], b: &[f32]) -> f32 {
    |    ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: function `cosine_similarity` is never used
   --> tests\embedding_performance_benchmark.rs:142:4
    |
142 | fn cosine_similarity(a: &[f32], b: &[f32]) -> f32 {
    |    ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `anyhow::Result`
 --> tests\semantic_quality_validation.rs:6:5
  |
6 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::collections::HashMap`
 --> tests\semantic_quality_validation.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `cosine_similarity` is never used
   --> tests\semantic_quality_validation.rs:430:4
    |
430 | fn cosine_similarity(a: &[f32], b: &[f32]) -> f32 {
    |    ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused imports: `Write` and `self`
  --> tests\orchestration\test_orchestrator.rs:10:15
   |
10 | use std::io::{self, Write};
   |               ^^^^  ^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `TestConfig`, `TestResult`, and `ValidationRule`
  --> tests\orchestration\mod.rs:11:5
   |
11 |     TestConfig, 
   |     ^^^^^^^^^^
12 |     ValidationRule,
   |     ^^^^^^^^^^^^^^
13 |     TestResult,
   |     ^^^^^^^^^^

warning: unused import: `TestOrchestrator`
 --> tests\run_orchestrated_tests.rs:9:48
  |
9 | use orchestration::{create_default_test_suite, TestOrchestrator};
  |                                                ^^^^^^^^^^^^^^^^

warning: field `retry_count` is never read
  --> tests\orchestration\test_orchestrator.rs:18:9
   |
14 | pub struct TestConfig {
   |            ---------- field in this struct
...
18 |     pub retry_count: u32,
   |         ^^^^^^^^^^^
   |
   = note: `TestConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: variant `MustProduceArtifact` is never constructed
  --> tests\orchestration\test_orchestrator.rs:30:5
   |
25 | pub enum ValidationRule {
   |          -------------- variant in this enum
...
30 |     MustProduceArtifact(String),
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: `ValidationRule` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `artifacts_produced` is never read
  --> tests\orchestration\test_orchestrator.rs:43:9
   |
35 | pub struct TestResult {
   |            ---------- field in this struct
...
43 |     pub artifacts_produced: Vec<String>,
   |         ^^^^^^^^^^^^^^^^^^
   |
   = note: `TestResult` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: constant `QK_K` is never used
  --> tests\q6k_dequantization_tests.rs:16:15
   |
16 |         const QK_K: usize = 256;
   |               ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unused import: `std::collections::HashMap`
  --> tests\fusion_score_normalization_tests.rs:10:5
   |
10 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `embed-search` (test "real_embedding_system_tests") generated 1 warning
warning: `embed-search` (test "embedding_performance_benchmark") generated 1 warning
warning: `embed-search` (test "semantic_quality_validation") generated 3 warnings (run `cargo fix --test "semantic_quality_validation"` to apply 2 suggestions)
warning: `embed-search` (test "run_orchestrated_tests") generated 6 warnings (run `cargo fix --test "run_orchestrated_tests"` to apply 3 suggestions)
warning: `embed-search` (test "q6k_dequantization_tests") generated 1 warning
warning: `embed-search` (test "fusion_score_normalization_tests") generated 1 warning (run `cargo fix --test "fusion_score_normalization_tests"` to apply 1 suggestion)
warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:634:5
    |
634 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:643:5
    |
643 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:652:5
    |
652 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:661:5
    |
661 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:670:5
    |
670 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unused variable: `memory_monitoring`
   --> tests\stress_test_framework\bm25_stress.rs:679:5
    |
679 |     memory_monitoring: bool
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unreachable statement
  --> tests\stress_test_framework\tantivy_stress.rs:76:5
   |
40 |         return Ok(results);
   |         ------------------ any code following this expression is unreachable
...
76 |     println!("✅ Tantivy Stress Test Suite Completed: {}/10 tests executed", results.len());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default
   = note: this warning originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `timeout`
  --> tests\stress_test_framework\tantivy_stress.rs:25:5
   |
25 |     timeout: Duration,
   |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timeout`

warning: unused variable: `memory_monitoring`
  --> tests\stress_test_framework\tantivy_stress.rs:26:5
   |
26 |     memory_monitoring: bool,
   |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unreachable statement
  --> tests\stress_test_framework\embedding_stress.rs:76:5
   |
40 |         return Ok(results);
   |         ------------------ any code following this expression is unreachable
...
76 |     println!("✅ Embedding Stress Test Suite Completed: {}/10 tests executed", results.len());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
   |
   = note: this warning originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `timeout`
  --> tests\stress_test_framework\embedding_stress.rs:25:5
   |
25 |     timeout: Duration,
   |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timeout`

warning: unused variable: `memory_monitoring`
  --> tests\stress_test_framework\embedding_stress.rs:26:5
   |
26 |     memory_monitoring: bool,
   |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unreachable statement
  --> tests\stress_test_framework\ast_stress.rs:76:5
   |
40 |         return Ok(results);
   |         ------------------ any code following this expression is unreachable
...
76 |     println!("✅ AST Stress Test Suite Completed: {}/10 tests executed", results.len());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
   |
   = note: this warning originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `timeout`
  --> tests\stress_test_framework\ast_stress.rs:25:5
   |
25 |     timeout: Duration,
   |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timeout`

warning: unused variable: `memory_monitoring`
  --> tests\stress_test_framework\ast_stress.rs:26:5
   |
26 |     memory_monitoring: bool,
   |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_monitoring`

warning: unused variable: `j`
   --> tests\fixtures\reference_embeddings.rs:165:14
    |
165 |         for (j, byte) in seed.bytes().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: unused variable: `by_category`
   --> tests\fixtures\semantic_similarity_benchmarks.rs:298:13
    |
298 |         let by_category = get_benchmarks_by_category();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_by_category`

warning: type `CategoryStats` is more private than the item `SuiteValidationReport::category_stats`
   --> tests\stress_test_framework\validation.rs:497:5
    |
497 |     pub category_stats: HashMap<StressTestCategory, CategoryStats>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `SuiteValidationReport::category_stats` is reachable at visibility `pub`
    |
note: but type `CategoryStats` is only usable at visibility `pub(self)`
   --> tests\stress_test_framework\validation.rs:485:1
    |
485 | struct CategoryStats {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:115:13
    |
115 |             bm25_engine.add_document(doc.clone());
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
115 |             let _ = bm25_engine.add_document(doc.clone());
    |             +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:162:9
    |
162 |         bm25_engine.add_document(massive_doc);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
162 |         let _ = bm25_engine.add_document(massive_doc);
    |         +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:243:13
    |
243 |             bm25_engine.add_document(doc);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
243 |             let _ = bm25_engine.add_document(doc);
    |             +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:380:17
    |
380 |                 engine.add_document(doc);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
380 |                 let _ = engine.add_document(doc);
    |                 +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:420:13
    |
420 |             recovery_engine.add_document(doc);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
420 |             let _ = recovery_engine.add_document(doc);
    |             +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:501:13
    |
501 |             bm25_engine.add_document(doc);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
501 |             let _ = bm25_engine.add_document(doc);
    |             +++++++

warning: unused `Result` that must be used
   --> tests\stress_test_framework\bm25_stress.rs:547:21
    |
547 |                     engine_guard.add_document(doc);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
547 |                     let _ = engine_guard.add_document(doc);
    |                     +++++++

warning: unused imports: `Context` and `Result`
  --> tests\stress_test_framework\validation.rs:23:14
   |
23 | use anyhow::{Result, Context};
   |              ^^^^^^  ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `TestMetrics`
  --> tests\stress_test_framework\validation.rs:26:51
   |
26 | use super::{StressTestResult, StressTestCategory, TestMetrics};
   |                                                   ^^^^^^^^^^^

warning: unused import: `TestValidator`
  --> tests\stress_test_framework_verification.rs:15:66
   |
15 |     pub use test_utilities::{MemoryMonitor, StressDataGenerator, TestValidator};
   |                                                                  ^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> tests\stress_test_framework_verification.rs:20:9
   |
20 |     use std::collections::HashMap;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: type `CategoryStats` is more private than the item `SuiteValidationReport::category_stats`
   --> tests\stress_test_framework\validation.rs:497:5
    |
497 |     pub category_stats: HashMap<StressTestCategory, CategoryStats>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `SuiteValidationReport::category_stats` is reachable at visibility `pub(crate)`
    |
note: but type `CategoryStats` is only usable at visibility `pub(self)`
   --> tests\stress_test_framework\validation.rs:485:1
    |
485 | struct CategoryStats {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: fields `timestamp` and `virtual_memory_mb` are never read
  --> tests\stress_test_framework\test_utilities.rs:33:5
   |
32 | struct MemorySample {
   |        ------------ fields in this struct
33 |     timestamp: Instant,
   |     ^^^^^^^^^
34 |     memory_mb: f64,
35 |     virtual_memory_mb: f64,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `MemorySample` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: method `total_allocated_mb` is never used
  --> tests\stress_test_framework\test_utilities.rs:87:12
   |
38 | impl MemoryMonitor {
   | ------------------ method in this implementation
...
87 |     pub fn total_allocated_mb(&self) -> f64 {
   |            ^^^^^^^^^^^^^^^^^^

warning: field `rng` is never read
   --> tests\stress_test_framework\test_utilities.rs:134:5
    |
133 | pub struct StressDataGenerator {
    |            ------------------- field in this struct
134 |     rng: rand::rngs::ThreadRng,
    |     ^^^

warning: struct `TestValidator` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:308:12
    |
308 | pub struct TestValidator {
    |            ^^^^^^^^^^^^^

warning: struct `ValidationRule` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:313:8
    |
313 | struct ValidationRule {
    |        ^^^^^^^^^^^^^^

warning: associated items `new` and `validate_test_stress` are never used
   --> tests\stress_test_framework\test_utilities.rs:321:12
    |
320 | impl TestValidator {
    | ------------------ associated items in this implementation
321 |     pub fn new() -> Self {
    |            ^^^
...
349 |     pub fn validate_test_stress(&self, test_name: &str, duration: Duration, memory_mb: f64, 
    |            ^^^^^^^^^^^^^^^^^^^^

warning: enum `ValidationResult` is never used
   --> tests\stress_test_framework\test_utilities.rs:393:10
    |
393 | pub enum ValidationResult {
    |          ^^^^^^^^^^^^^^^^
    |
    = note: `ValidationResult` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: struct `PerformanceProfiler` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:400:12
    |
400 | pub struct PerformanceProfiler {
    |            ^^^^^^^^^^^^^^^^^^^

warning: struct `PerformanceCheckpoint` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:407:8
    |
407 | struct PerformanceCheckpoint {
    |        ^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `checkpoint`, `get_performance_summary`, and `is_performance_stable` are never used
   --> tests\stress_test_framework\test_utilities.rs:415:12
    |
414 | impl PerformanceProfiler {
    | ------------------------ associated items in this implementation
415 |     pub fn new() -> Self {
    |            ^^^
...
423 |     pub fn checkpoint(&mut self, name: &str, memory_mb: f64) {
    |            ^^^^^^^^^^
...
434 |     pub fn get_performance_summary(&self) -> PerformanceSummary {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
448 |     fn is_performance_stable(&self) -> bool {
    |        ^^^^^^^^^^^^^^^^^^^^^

warning: struct `PerformanceSummary` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:467:12
    |
467 | pub struct PerformanceSummary {
    |            ^^^^^^^^^^^^^^^^^^
    |
    = note: `PerformanceSummary` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: struct `SystemResourceMonitor` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:475:12
    |
475 | pub struct SystemResourceMonitor {
    |            ^^^^^^^^^^^^^^^^^^^^^

warning: struct `ResourceSample` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:481:8
    |
481 | struct ResourceSample {
    |        ^^^^^^^^^^^^^^

warning: associated items `new`, `sample_resources`, and `get_resource_summary` are never used
   --> tests\stress_test_framework\test_utilities.rs:490:12
    |
489 | impl SystemResourceMonitor {
    | -------------------------- associated items in this implementation
490 |     pub fn new() -> Self {
    |            ^^^
...
497 |     pub fn sample_resources(&self) {
    |            ^^^^^^^^^^^^^^^^
...
511 |     pub fn get_resource_summary(&self) -> ResourceSummary {
    |            ^^^^^^^^^^^^^^^^^^^^

warning: struct `ResourceSummary` is never constructed
   --> tests\stress_test_framework\test_utilities.rs:526:12
    |
526 | pub struct ResourceSummary {
    |            ^^^^^^^^^^^^^^^
    |
    = note: `ResourceSummary` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `required_stress_indicators` and `forbidden_patterns` are never read
  --> tests\stress_test_framework\validation.rs:40:5
   |
36 | struct CategoryValidationRules {
   |        ----------------------- fields in this struct
...
40 |     required_stress_indicators: Vec<StressIndicator>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |     forbidden_patterns: Vec<ForbiddenPattern>,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `CategoryValidationRules` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `min_actual_failures_required` and `required_diagnostic_depth` are never read
  --> tests\stress_test_framework\validation.rs:48:5
   |
46 | struct GlobalValidationRules {
   |        --------------------- fields in this struct
47 |     max_placeholder_tests: usize,
48 |     min_actual_failures_required: usize,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |     required_diagnostic_depth: usize,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `GlobalValidationRules` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `min_mb` is never read
  --> tests\stress_test_framework\validation.rs:55:20
   |
55 |     MemoryGrowth { min_mb: f64 },
   |     ------------   ^^^^^^
   |     |
   |     field in this variant
   |
   = note: `StressIndicator` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `min_percent` is never read
  --> tests\stress_test_framework\validation.rs:56:16
   |
56 |     CpuUsage { min_percent: f32 },
   |     --------   ^^^^^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `StressIndicator` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `min_operations` is never read
  --> tests\stress_test_framework\validation.rs:57:14
   |
57 |     DiskIO { min_operations: usize },
   |     ------   ^^^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `StressIndicator` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `ConcurrentExecution`, `ResourceExhaustion`, `ErrorRecovery`, and `PerformanceDegradation` are never constructed
  --> tests\stress_test_framework\validation.rs:58:5
   |
54 | enum StressIndicator {
   |      --------------- variants in this enum
...
58 |     ConcurrentExecution { min_threads: usize },
   |     ^^^^^^^^^^^^^^^^^^^
59 |     ResourceExhaustion { resource_type: String },
   |     ^^^^^^^^^^^^^^^^^^
60 |     ErrorRecovery { error_types: Vec<String> },
   |     ^^^^^^^^^^^^^
61 |     PerformanceDegradation { threshold_percent: f64 },
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `StressIndicator` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `max_duration` is never read
  --> tests\stress_test_framework\validation.rs:67:15
   |
67 |     TooFast { max_duration: Duration },
   |     -------   ^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `ForbiddenPattern` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `SimulatedErrors`, `FakeMetrics`, and `NoActualStress` are never constructed
  --> tests\stress_test_framework\validation.rs:70:5
   |
66 | enum ForbiddenPattern {
   |      ---------------- variants in this enum
...
70 |     SimulatedErrors,
   |     ^^^^^^^^^^^^^^^
71 |     FakeMetrics,
   |     ^^^^^^^^^^^
72 |     NoActualStress,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ForbiddenPattern` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `print_report` is never used
   --> tests\stress_test_framework\validation.rs:512:12
    |
510 | impl SuiteValidationReport {
    | -------------------------- method in this implementation
511 |     /// Print comprehensive validation report
512 |     pub fn print_report(&self) {
    |            ^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> tests\integration_end_to_end_validation.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::sync::Arc`
 --> tests\integration_end_to_end_validation.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::time::Instant`
 --> tests\integration_end_to_end_validation.rs:9:5
  |
9 | use std::time::Instant;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
  --> tests\integration_end_to_end_validation.rs:10:5
   |
10 | use tokio::sync::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
  --> tests\integration_end_to_end_validation.rs:11:5
   |
11 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `embed_search::search::unified::UnifiedSearcher`
  --> tests\integration_end_to_end_validation.rs:18:5
   |
18 | use embed_search::search::unified::UnifiedSearcher;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `embed_search::config::Config`
  --> tests\integration_end_to_end_validation.rs:19:5
   |
19 | use embed_search::config::Config;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `embed_search::chunking::SimpleRegexChunker`
  --> tests\integration_end_to_end_validation.rs:20:5
   |
20 | use embed_search::chunking::SimpleRegexChunker;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
   --> tests\integration_end_to_end_validation.rs:474:9
    |
474 |     use super::*;
    |         ^^^^^^^^

warning: unreachable statement
   --> tests\integration_end_to_end_validation.rs:482:9
    |
479 |         panic!("ML feature required for integration tests");
    |         --------------------------------------------------- any code following this expression is unreachable
...
482 |         panic!("VectorDB feature required for integration tests");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: struct `SemanticBenchmark` is never constructed
  --> tests\integration_end_to_end_validation.rs:23:8
   |
23 | struct SemanticBenchmark {
   |        ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function `new` is never used
  --> tests\integration_end_to_end_validation.rs:29:8
   |
28 | impl SemanticBenchmark {
   | ---------------------- associated function in this implementation
29 |     fn new() -> Self {
   |        ^^^

warning: function `create_test_documents` is never used
   --> tests\integration_end_to_end_validation.rs:366:4
    |
366 | fn create_test_documents() -> Vec<String> {
    |    ^^^^^^^^^^^^^^^^^^^^^

warning: function `calculate_cosine_similarity` is never used
   --> tests\integration_end_to_end_validation.rs:457:4
    |
457 | fn calculate_cosine_similarity(a: &[f32], b: &[f32]) -> f32 {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> tests\tantivy_fuzzy_stress_tests.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_fuzzy_stress_tests.rs:2:5
  |
2 | use std::fs;
  |     ^^^^^^^

warning: unused import: `std::path::Path`
 --> tests\tantivy_fuzzy_stress_tests.rs:3:5
  |
3 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> tests\tantivy_fuzzy_stress_tests.rs:4:17
  |
4 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `anyhow::Result`
 --> tests\tantivy_fuzzy_stress_tests.rs:5:5
  |
5 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\tantivy_fuzzy_stress_tests.rs:6:5
  |
6 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
  --> tests\tantivy_fuzzy_stress_tests.rs:23:9
   |
23 |     use super::*;
   |         ^^^^^^^^

warning: function `calculate_edit_distance` is never used
   --> tests\tantivy_fuzzy_stress_tests.rs:549:4
    |
549 | fn calculate_edit_distance(s1: &str, s2: &str) -> usize {
    |    ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: function `calculate_relevance_score` is never used
   --> tests\tantivy_fuzzy_stress_tests.rs:583:4
    |
583 | fn calculate_relevance_score(query: &str, result: &str) -> f64 {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field `temp_dir` is never read
  --> tests\security_validation_tests.rs:20:9
   |
19 |     struct SecurityTestSetup {
   |            ----------------- field in this struct
20 |         temp_dir: TempDir,
   |         ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unused import: `std::collections::HashMap`
 --> tests\tantivy_stress_tests.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_stress_tests.rs:2:5
  |
2 | use std::fs;
  |     ^^^^^^^

warning: unused import: `std::io::Write`
 --> tests\tantivy_stress_tests.rs:3:5
  |
3 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `PathBuf` and `Path`
 --> tests\tantivy_stress_tests.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^  ^^^^^^^

warning: unused import: `std::sync::Arc`
 --> tests\tantivy_stress_tests.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `AtomicUsize` and `Ordering`
 --> tests\tantivy_stress_tests.rs:6:25
  |
6 | use std::sync::atomic::{AtomicUsize, Ordering};
  |                         ^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `Duration`
 --> tests\tantivy_stress_tests.rs:7:17
  |
7 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `std::thread`
 --> tests\tantivy_stress_tests.rs:8:5
  |
8 | use std::thread;
  |     ^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
  --> tests\tantivy_stress_tests.rs:10:5
   |
10 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::task`
  --> tests\tantivy_stress_tests.rs:11:5
   |
11 | use tokio::task;
   |     ^^^^^^^^^^^

warning: unused import: `futures::future::join_all`
  --> tests\tantivy_stress_tests.rs:12:5
   |
12 | use futures::future::join_all;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
  --> tests\tantivy_stress_tests.rs:31:9
   |
31 |     use super::*;
   |         ^^^^^^^^

warning: trait `StressTestMetrics` is never used
    --> tests\tantivy_stress_tests.rs:2498:7
     |
2498 | trait StressTestMetrics {
     |       ^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: `embed-search` (test "lib") generated 25 warnings
warning: `embed-search` (test "stress_test_framework_verification") generated 29 warnings (run `cargo fix --test "stress_test_framework_verification"` to apply 4 suggestions)
warning: `embed-search` (test "integration_end_to_end_validation") generated 14 warnings (run `cargo fix --test "integration_end_to_end_validation"` to apply 9 suggestions)
warning: `embed-search` (test "tantivy_fuzzy_stress_tests") generated 9 warnings (run `cargo fix --test "tantivy_fuzzy_stress_tests"` to apply 7 suggestions)
warning: `embed-search` (test "security_validation_tests") generated 1 warning
warning: `embed-search` (test "tantivy_stress_tests") generated 13 warnings (run `cargo fix --test "tantivy_stress_tests"` to apply 12 suggestions)
warning: unused import: `std::collections::HashMap`
 --> tests\tantivy_brutal_weakness_exposure.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_brutal_weakness_exposure.rs:2:5
  |
2 | use std::fs;
  |     ^^^^^^^

warning: unused import: `std::io::Write`
 --> tests\tantivy_brutal_weakness_exposure.rs:3:5
  |
3 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `PathBuf` and `Path`
 --> tests\tantivy_brutal_weakness_exposure.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^  ^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> tests\tantivy_brutal_weakness_exposure.rs:5:17
  |
5 | use std::sync::{Arc, Mutex};
  |                 ^^^  ^^^^^

warning: unused imports: `AtomicUsize` and `Ordering`
 --> tests\tantivy_brutal_weakness_exposure.rs:6:25
  |
6 | use std::sync::atomic::{AtomicUsize, Ordering};
  |                         ^^^^^^^^^^^  ^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> tests\tantivy_brutal_weakness_exposure.rs:7:17
  |
7 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `std::thread`
 --> tests\tantivy_brutal_weakness_exposure.rs:8:5
  |
8 | use std::thread;
  |     ^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> tests\tantivy_brutal_weakness_exposure.rs:9:5
  |
9 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tempfile::TempDir`
  --> tests\tantivy_brutal_weakness_exposure.rs:10:5
   |
10 | use tempfile::TempDir;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::task`
  --> tests\tantivy_brutal_weakness_exposure.rs:11:5
   |
11 | use tokio::task;
   |     ^^^^^^^^^^^

warning: unused import: `futures::future::join_all`
  --> tests\tantivy_brutal_weakness_exposure.rs:12:5
   |
12 | use futures::future::join_all;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
  --> tests\tantivy_brutal_weakness_exposure.rs:36:9
   |
36 |     use super::*;
   |         ^^^^^^^^

warning: unused macro definition: `brutal_assert`
    --> tests\tantivy_brutal_weakness_exposure.rs:2101:14
     |
2101 | macro_rules! brutal_assert {
     |              ^^^^^^^^^^^^^
     |
     = note: `#[warn(unused_macros)]` on by default

warning: function `get_memory_usage` is never used
    --> tests\tantivy_brutal_weakness_exposure.rs:2077:4
     |
2077 | fn get_memory_usage() -> f64 {
     |    ^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_comprehensive_stress_runner.rs:2:5
  |
2 | use std::fs;
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::path::Path`
 --> tests\tantivy_comprehensive_stress_runner.rs:3:5
  |
3 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `Command` and `Stdio`
 --> tests\tantivy_comprehensive_stress_runner.rs:4:20
  |
4 | use std::process::{Command, Stdio};
  |                    ^^^^^^^  ^^^^^

warning: unused imports: `AtomicUsize` and `Ordering`
 --> tests\tantivy_comprehensive_stress_runner.rs:5:25
  |
5 | use std::sync::atomic::{AtomicUsize, Ordering};
  |                         ^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> tests\tantivy_comprehensive_stress_runner.rs:6:5
  |
6 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `Context`
 --> tests\tantivy_comprehensive_stress_runner.rs:8:22
  |
8 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\tantivy_comprehensive_stress_runner.rs:9:5
  |
9 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: unused variable: `category_name`
   --> tests\tantivy_comprehensive_stress_runner.rs:561:39
    |
561 |     fn add_category_result(&mut self, category_name: &str, result: TestCategoryResult) {
    |                                       ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_category_name`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `success_rate` and `additional_metrics` are never read
   --> tests\tantivy_comprehensive_stress_runner.rs:491:5
    |
487 | struct TestMetrics {
    |        ----------- fields in this struct
...
491 |     success_rate: f64,
    |     ^^^^^^^^^^^^
492 |     additional_metrics: HashMap<String, f64>,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = note: `TestMetrics` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `std::fs`
 --> tests\run_tantivy_stress_verification.rs:1:5
  |
1 | use std::fs;
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::path::Path`
 --> tests\run_tantivy_stress_verification.rs:2:5
  |
2 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `std::process::Command`
 --> tests\run_tantivy_stress_verification.rs:3:5
  |
3 | use std::process::Command;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Context`
 --> tests\run_tantivy_stress_verification.rs:5:22
  |
5 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\run_tantivy_stress_verification.rs:6:5
  |
6 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> tests\integration\comprehensive_stress_validation.rs:5:5
  |
5 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::path::PathBuf`
 --> tests\search_functionality_validation.rs:3:5
  |
3 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: field `vectortest_path` is never read
  --> tests\search_accuracy_test.rs:16:5
   |
14 | struct TestEnvironment {
   |        --------------- field in this struct
15 |     searcher: UnifiedSearcher,
16 |     vectortest_path: PathBuf,
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unused import: `std::fs`
 --> tests\tantivy_quick_verification.rs:1:5
  |
1 | use std::fs;
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::path::Path`
 --> tests\tantivy_quick_verification.rs:2:5
  |
2 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> tests\tantivy_quick_verification.rs:3:17
  |
3 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `Context`
 --> tests\tantivy_quick_verification.rs:4:22
  |
4 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused import: `tempfile::TempDir`
 --> tests\tantivy_quick_verification.rs:5:5
  |
5 | use tempfile::TempDir;
  |     ^^^^^^^^^^^^^^^^^

warning: `embed-search` (test "tantivy_brutal_weakness_exposure") generated 15 warnings (run `cargo fix --test "tantivy_brutal_weakness_exposure"` to apply 13 suggestions)
warning: `embed-search` (test "tantivy_comprehensive_stress_runner") generated 9 warnings (run `cargo fix --test "tantivy_comprehensive_stress_runner"` to apply 7 suggestions)
warning: `embed-search` (test "run_tantivy_stress_verification") generated 5 warnings (run `cargo fix --test "run_tantivy_stress_verification"` to apply 5 suggestions)
warning: `embed-search` (test "comprehensive_stress_validation") generated 1 warning (run `cargo fix --test "comprehensive_stress_validation"` to apply 1 suggestion)
warning: `embed-search` (test "search_functionality_validation") generated 1 warning (run `cargo fix --test "search_functionality_validation"` to apply 1 suggestion)
warning: `embed-search` (test "search_accuracy_test") generated 1 warning
warning: `embed-search` (test "tantivy_quick_verification") generated 5 warnings (run `cargo fix --test "tantivy_quick_verification"` to apply 5 suggestions)
error: expected `,`, found `.`
   --> tests\nomic3_brutal_stress_tests.rs:956:22
    |
956 |         println!("=" .repeat(60));
    |                      ^ expected `,`

error: argument never used
   --> tests\nomic3_brutal_stress_tests.rs:956:23
    |
956 |         println!("=" .repeat(60));
    |                  ---  ^^^^^^^^^^ argument never used
    |                  |
    |                  formatting specifier missing

error: expected `,`, found `+`
   --> tests\nomic3_brutal_stress_tests.rs:980:23
    |
980 |         println!("\n" + "=" .repeat(60));
    |                       ^ expected `,`

error[E0433]: failed to resolve: unresolved import
  --> tests\nomic3_brutal_stress_tests.rs:19:12
   |
19 | use crate::storage::lancedb_storage::{LanceDbStorage, LanceEmbeddingRecord, IndexConfig, IndexType, LanceStorageError};
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `embed_search::storage`

error[E0432]: unresolved import `crate::error`
  --> tests\nomic3_brutal_stress_tests.rs:20:12
   |
20 | use crate::error::EmbedError;
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `clap::error`

error[E0308]: mismatched types
   --> tests\bm25_stress_tests.rs:219:54
    |
219 |                   if duration > Duration::from_secs(5) {
    |  ______________________________________________________^
220 | |                     println!("WARNING: Search took {:?} which may indicate performance issues with large vocabularies", duration);
221 | |                 }
    | |_________________^ expected `Result<(), Box<dyn Error>>`, found `()`
    |
    = note:   expected enum `Result<(), Box<(dyn std::error::Error + 'static)>>`
            found unit type `()`

error[E0433]: failed to resolve: unresolved import
   --> tests\nomic3_brutal_stress_tests.rs:714:24
    |
714 |     let cache = crate::embedding::EmbeddingCache::new_with_persistence(100, cache_dir);
    |                        ^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
714 |     let cache = crate::embed_search::embedding::EmbeddingCache::new_with_persistence(100, cache_dir);
    |                             ++++++++++++++
help: consider importing one of these structs
    |
1   + use embed_search::EmbeddingCache;
    |
1   + use embed_search::embedding::EmbeddingCache;
    |
help: if you import `EmbeddingCache`, refer to it directly
    |
714 -     let cache = crate::embedding::EmbeddingCache::new_with_persistence(100, cache_dir);
714 +     let cache = EmbeddingCache::new_with_persistence(100, cache_dir);
    |

error[E0433]: failed to resolve: unresolved import
   --> tests\nomic3_brutal_stress_tests.rs:718:28
    |
718 |         let cache = crate::embedding::EmbeddingCache::new(100).unwrap();
    |                            ^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
718 |         let cache = crate::embed_search::embedding::EmbeddingCache::new(100).unwrap();
    |                                 ++++++++++++++
help: consider importing one of these structs
    |
1   + use embed_search::EmbeddingCache;
    |
1   + use embed_search::embedding::EmbeddingCache;
    |
help: if you import `EmbeddingCache`, refer to it directly
    |
718 -         let cache = crate::embedding::EmbeddingCache::new(100).unwrap();
718 +         let cache = EmbeddingCache::new(100).unwrap();
    |

error[E0433]: failed to resolve: unresolved import
   --> tests\nomic3_brutal_stress_tests.rs:875:59
    |
875 | async fn test_cache_invalidation_scenarios(cache: &crate::embedding::EmbeddingCache) {
    |                                                           ^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
875 | async fn test_cache_invalidation_scenarios(cache: &crate::embed_search::embedding::EmbeddingCache) {
    |                                                                ++++++++++++++
help: consider importing this module
    |
1   + use embed_search::embedding;
    |
help: if you import `embedding`, refer to it directly
    |
875 - async fn test_cache_invalidation_scenarios(cache: &crate::embedding::EmbeddingCache) {
875 + async fn test_cache_invalidation_scenarios(cache: &embedding::EmbeddingCache) {
    |

error[E0425]: cannot find function `repeat` in this scope
   --> tests\nomic3_brutal_stress_tests.rs:956:23
    |
956 |         println!("=" .repeat(60));
    |                       ^^^^^^ not found in this scope
    |
help: consider importing one of these functions
    |
950 +     use std::array::repeat;
    |
950 +     use std::io::repeat;
    |
950 +     use std::iter::repeat;
    |
950 +     use core::array::repeat;
    |
      and 5 other candidates

warning: unused import: `std::sync::Arc`
 --> tests\nomic3_brutal_stress_tests.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Duration`
 --> tests\nomic3_brutal_stress_tests.rs:9:17
  |
9 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `tokio::time::sleep`
  --> tests\nomic3_brutal_stress_tests.rs:10:5
   |
10 | use tokio::time::sleep;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
  --> tests\nomic3_brutal_stress_tests.rs:13:5
   |
13 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> tests\nomic3_brutal_stress_tests.rs:14:5
   |
14 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `GlobalAlloc`, `Layout`, and `System`
   --> tests\nomic3_brutal_stress_tests.rs:922:22
    |
922 |     use std::alloc::{GlobalAlloc, Layout, System};
    |                      ^^^^^^^^^^^  ^^^^^^  ^^^^^^

For more information about this error, try `rustc --explain E0308`.
error: could not compile `embed-search` (test "bm25_stress_tests") due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error[E0277]: `()` is not a future
   --> tests\nomic3_brutal_stress_tests.rs:973:44
    |
973 |         test_4_index_threshold_violation().await;
    |         ---------------------------------- ^^^^^ `()` is not a future
    |         |
    |         this call returns `()`
    |
    = help: the trait `Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `IntoFuture`
help: remove the `.await`
    |
973 -         test_4_index_threshold_violation().await;
973 +         test_4_index_threshold_violation();
    |
help: alternatively, consider making `fn test_4_index_threshold_violation` asynchronous
    |
198 | async async fn test_4_index_threshold_violation() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\nomic3_brutal_stress_tests.rs:974:48
    |
974 |         test_6_dimension_mismatch_corruption().await;
    |         -------------------------------------- ^^^^^ `()` is not a future
    |         |
    |         this call returns `()`
    |
    = help: the trait `Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `IntoFuture`
help: remove the `.await`
    |
974 -         test_6_dimension_mismatch_corruption().await;
974 +         test_6_dimension_mismatch_corruption();
    |
help: alternatively, consider making `fn test_6_dimension_mismatch_corruption` asynchronous
    |
351 | async async fn test_6_dimension_mismatch_corruption() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\nomic3_brutal_stress_tests.rs:975:39
    |
975 |         test_7_nan_injection_attack().await;
    |         ----------------------------- ^^^^^ `()` is not a future
    |         |
    |         this call returns `()`
    |
    = help: the trait `Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `IntoFuture`
help: remove the `.await`
    |
975 -         test_7_nan_injection_attack().await;
975 +         test_7_nan_injection_attack();
    |
help: alternatively, consider making `fn test_7_nan_injection_attack` asynchronous
    |
425 | async async fn test_7_nan_injection_attack() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\nomic3_brutal_stress_tests.rs:976:48
    |
976 |         test_10_embedding_cache_invalidation().await;
    |         -------------------------------------- ^^^^^ `()` is not a future
    |         |
    |         this call returns `()`
    |
    = help: the trait `Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `IntoFuture`
help: remove the `.await`
    |
976 -         test_10_embedding_cache_invalidation().await;
976 +         test_10_embedding_cache_invalidation();
    |
help: alternatively, consider making `fn test_10_embedding_cache_invalidation` asynchronous
    |
707 | async async fn test_10_embedding_cache_invalidation() {
    |       +++++

Some errors have detailed explanations: E0277, E0425, E0432, E0433.
For more information about an error, try `rustc --explain E0277`.
warning: `embed-search` (test "nomic3_brutal_stress_tests") generated 6 warnings
error: could not compile `embed-search` (test "nomic3_brutal_stress_tests") due to 13 previous errors; 6 warnings emitted
